Create documents in one main collection. Create documents in 3 sub collections which are crosslinked to the main collection. Use CTS functions to retrieve data from the sub collections, perform join according to the datatype and update the elements in main collection.



xquery version "1.0-ml";
for $uri in cts:uris("",(),cts:collection-query("employee"))
let $employee := doc($uri)/employee
let $did := $employee/did
let $courseId := $employee/courseId
let $classId := $employee/classId
let $dep := cts:search(
fn:doc(),
cts:and-query((
cts:collection-query("department"),
cts:path-range-query("/department/did","=",string($did))
))
)
let $course := cts:search(
fn:doc(),
cts:and-query((
cts:collection-query("course"),
cts:path-range-query("/course/courseId","=",string($courseId))
))
)
let $course := cts:search(
fn:doc(),
cts:and-query((
cts:collection-query("course"),
cts:path-range-query("/course/courseId","=",string($courseId))
))
)
let $updatedquery := element Student{
$employee/did,
$employee/courseId,
$employee/courseId,
if($dep) then $dep/department/dname else ()
}
return xdmp:document-insert($uri,$updatedquery,map:entry("collections","employee"))
